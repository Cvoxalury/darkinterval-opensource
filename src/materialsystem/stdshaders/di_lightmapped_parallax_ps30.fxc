// STATIC: "BASEMAPALPHAPARALLAXMAP"	"0..0"
// STATIC: "DETAILTEXTURE"				"0..1"
// STATIC: "SELFILLUM"					"0..1"
// STATIC: "CUBEMAP"					"0..1"
// STATIC: "BUMPMAP"					"0..1"
// STATIC: "FLASHLIGHT"					"0..1"
// STATIC: "UNLIT"						"0..1"
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..2"	[ps20b] [PC]
// DYNAMIC: "FLASHLIGHTSHADOWS"			"0..1"  [ps20b]
// DYNAMIC: "PIXELFOGTYPE"				"0..1"
// DYNAMIC: "PARALLAXDEBUG"				"0..3"

// We don't care about flashlight depth unless the flashlight is on
// SKIP: ( $FLASHLIGHT == 0 ) && ( $FLASHLIGHTSHADOWS == 1 )	[ps20b]
// SKIP: ( $UNLIT != 0 ) && ($SELFILLUM != 0)
// SKIP: ( $UNLIT != 0 ) && ($BUMPMAP != 0)
// SKIP: ( $UNLIT != 0 ) && ($FLASHLIGHT != 0)
//---------------------------------------------------------------------------------//
// Relief mapping algorithm implementation. Pixel shader.              
//---------------------------------------------------------------------------------//
#include "common_ps_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_lightmappedgeneric_fxc.h"
//..........................................................................................
// Uniform shader parameters declaration
//..........................................................................................

const float4 g_ParallaxParms	: register( c0 );
#define fHeightMapRange  ( g_ParallaxParms.x )
#define cParallaxMinSteps (g_ParallaxParms.y)
#define cParallaxMaxSteps (g_ParallaxParms.z)
#define cParallaxOcclusionRatio (g_ParallaxParms.w)

const HALF3 g_DiffuseModulation	: register( c1 );
const HALF4 g_SelfIllumTint		: register( c2 );

const HALF4 g_EyeParams			: register( c5 );
#define g_EyePos (g_EyeParams.xyz)
#define g_LodDist (g_EyeParams.w)
const HALF4 g_FogParams			: register( c6 );

const HALF4 g_EnvmapTint		: register( c7 );
const HALF3 g_EnvmapParams		: register( c8 );
#define g_EnvmapContrast (g_EnvmapParams.x)
#define g_EnvmapSaturation (g_EnvmapParams.y)

const float4 g_BaseColor	: register( c9 );
//const float4 g_SelfillumTint	: register( c10 );

const HALF3 g_FlashlightPos						: register( c15 );
const float4x4 g_FlashlightWorldToTexture		: register( c16 );
const float4 g_FlashlightAttenuationFactors		: register( c20 );

// texture samplers
sampler tBaseMap		: register( s0 );
sampler tHeightMap		: register( s1 );
#if !UNLIT
sampler tLightmap		: register( s2 );
#endif
sampler tFlashlight		: register( s3 );
#if BUMPMAP
sampler tBumpMap		: register( s4 );
#endif
sampler tNormalisation	: register( s6 );
sampler tDepth			: register( s7 );
#if DETAILTEXTURE
sampler tDetail			: register( s8 );
#endif
#if CUBEMAP
sampler tEnvmap			: register( s9 );
#endif
//..........................................................................................
// Note: centroid is specified if multisampling is enabled through RenderMonkey's DirectX
// window preferences settings
//..........................................................................................
struct PS_INPUT
{
	float2 texCoord				: TEXCOORD0;
//	float3 vLightTS				: TEXCOORD1_centroid;   // light vector in tangent space, denormalized
	float3 vViewTS				: TEXCOORD2_centroid;   // view vector in tangent space, denormalized
	float2 vParallaxOffsetTS	: TEXCOORD3_centroid;   // Parallax offset vector in tangent space
	float3 vNormalWS			: TEXCOORD4_centroid;   // Normal vector in world space
	float3 vViewWS				: TEXCOORD5_centroid;   // View vector in world space	
	
	HALF4 lightmapTexCoord1And2 : TEXCOORD6;	// CENTROID: TEXCOORD6	
	HALF2 lightmapTexCoord3		: TEXCOORD7;	// CENTROID: TEXCOORD7
		
	HALF4 worldPos_projPosZ		: TEXCOORD1;
	HALF4 fogFactorW			: COLOR1;
};

//...........................................................................................
// Function:    ps_main
//
// Description: Computes pixel illumination result due to applying parallax occlusion mapping 
//              to simulation of view-dependent surface displacement for a given height map 
//...........................................................................................
float4 main( PS_INPUT i ) : COLOR
{   
	bool bBumpmap = BUMPMAP ? true : false;
	bool bFlashlight = FLASHLIGHT ? true : false;
	bool bSelfIllum = SELFILLUM ? true : false;
	bool bCubemap = CUBEMAP ? true : false;
	bool bHeightmap = !BASEMAPALPHAPARALLAXMAP;
	bool bBasealphaHeightmap = BASEMAPALPHAPARALLAXMAP ? true : false;

	int nMinSamples = cParallaxMinSteps;
	int nMaxSamples = cParallaxMaxSteps;

//	const int iDebug = PARALLAXDEBUG;

	//  Normalize the interpolated vectors:
	float3 vViewTS   = normalize( i.vViewTS  );
	float3 vViewWS   = normalize( i.vViewWS  );
//	float3 vLightTS  = normalize( i.vLightTS );
	float3 vNormalWS = normalize( i.vNormalWS );
		
	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos.z, i.worldPos_projPosZ.z, i.worldPos_projPosZ.w );
	
#if ( PARALLAXDEBUG == 3)
	HALF4 offsetColor = float4(length(i.vParallaxOffsetTS), 1, 1, 1);
	return FinalOutput( offsetColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR ); 		
#endif

	HALF4 baseColor = tex2D( tBaseMap, i.texCoord );
#if BUMPMAP
	HALF4 bumpColor = baseColor;
#endif
	HALF4 heightColor = baseColor;
#if !UNLIT
	HALF4 lightmapColor = tex2D( tLightmap, i.texCoord );
#endif

	if( bHeightmap)
	{
		if( PARALLAXDEBUG == 1)
		{
			heightColor = tex2D( tHeightMap, i.texCoord );			
			return FinalOutput( heightColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR );
		}
	}

#if BUMPMAP
	{	
		if( PARALLAXDEBUG == 2)
		{
			HALF4 bumpColor = tex2D( tBumpMap, i.texCoord );
			return FinalOutput( bumpColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR );
		}
	}
#endif	
	HALF3 normal = HALF3( 0.0f, 0.0f, 1.0f );
	
	// Compute all the derivatives:
	float2 dx = ddx( i.texCoord );
	float2 dy = ddy( i.texCoord );
	float  fParallaxAmount;
//	float2 vParallaxOffset = float2(0,0);

	//===============================================//
	// Parallax occlusion mapping offset computation //
	//===============================================//

	// Utilize dynamic flow control to change the number of samples per ray 
	// depending on the viewing angle for the surface. Oblique angles require 
	// smaller step sizes to achieve more accurate precision for computing displacement.
	// We express the sampling rate as a linear function of the angle between 
	// the geometric normal and the view direction ray:

	// FIXME: this is observed to produce lag spikes. Disabling until a solution is found
	int nNumSteps = nMinSamples; //(int) lerp( nMaxSamples, nMinSamples, dot( vViewWS, vNormalWS ) );

	// Intersect the view ray with the height field profile along the direction of
	// the parallax offset ray (computed in the vertex shader. Note that the code is
	// designed specifically to take advantage of the dynamic flow control constructs
	// in HLSL and is very sensitive to specific syntax. When converting to other examples,
	// if still want to use dynamic flow control in the resulting assembly shader,
	// care must be applied.
	// 
	// In the below steps we approximate the height field profile as piecewise linear
	// curve. We find the pair of endpoints between which the intersection between the 
	// height field profile and the view ray is found and then compute line segment
	// intersection for the view ray and the line segment formed by the two endpoints.
	// This intersection is the displacement offset from the original texture coordinate.
	// See the above paper for more details about the process and derivation.
	//

	if(length(g_EyePos - i.worldPos_projPosZ.xyz) < g_LodDist || g_LodDist < 0)
	{
		float fCurrHeight = 0.0f;
		float fStepSize   = 1.0f / (float) nNumSteps;
		float fPrevHeight = 1.0f;
		float fNextHeight = 0.0f;

		int    nStepIndex = 0;
	//	bool   bCondition = true;

		float2 vTexOffsetPerStep = fStepSize * i.vParallaxOffsetTS;
		float2 vTexCurrentOffset = i.texCoord;
		float  fCurrentBound     = 1.0f;
		/*float*/  fParallaxAmount   = 0.0f;

		float2 pt1 = 0;
		float2 pt2 = 0;

		float2 texOffset2 = 0;
	
		while ( nStepIndex < nNumSteps ) 
		{
			vTexCurrentOffset -= vTexOffsetPerStep;

			// Sample height map, taken from texture sampler one. It's supposed
			// to be a grayscale heightmap.

			fCurrHeight = (tex2Dgrad( tHeightMap, vTexCurrentOffset, dx, dy ));
						
			if( PARALLAXDEBUG == 3)
			{
			//	return FinalOutput( float4(1 + fCurrHeight, 1 + fCurrHeight, 1 + fCurrHeight, 1.0f), fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR );
			}

			fCurrentBound -= fStepSize;

			if ( fCurrHeight > fCurrentBound ) 
			{     
				pt1 = float2( fCurrentBound, fCurrHeight );
				pt2 = float2( fCurrentBound + fStepSize, fPrevHeight );

				texOffset2 = vTexCurrentOffset - vTexOffsetPerStep;

				nStepIndex = nNumSteps + 1;
			}
			else
			{
				nStepIndex++;
				fPrevHeight = fCurrHeight;
			}
		}   // End of while ( nStepIndex < nNumSteps )

		float fDelta2 = pt2.x - pt2.y;
		float fDelta1 = pt1.x - pt1.y;
		fParallaxAmount = (pt1.x * fDelta2 - pt2.x * fDelta1 ) / ( fDelta2 - fDelta1 );

		float2 vParallaxOffset = i.vParallaxOffsetTS * (1 - fParallaxAmount );

		// The computed texture offset for the displaced point on the pseudo-extruded surface:
		float2 texSample = i.texCoord - vParallaxOffset;
	
		baseColor.xyz = tex2Dgrad( tBaseMap, texSample, dx, dy ).rgb * g_BaseColor.xyz;
#if BUMPMAP
		bumpColor.xyz = tex2Dgrad( tBumpMap, texSample, dx, dy ).rgb;
#endif
#if !UNLIT
//		lightmapColor.xyz = tex2Dgrad( tLightmap, texSample, dx, dy ).rgb;
//		if( PARALLAXDEBUG == 3)
//		{		
//			return FinalOutput( lightmapColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR );
//		}
#endif
	} 
	else
	{
		baseColor.xyz = tex2D( tBaseMap, i.texCoord ).rgb * g_BaseColor.xyz;
#if BUMPMAP
		bumpColor.xyz = tex2D( tBumpMap, i.texCoord ).rgb;	
#endif
	} // end of g_LodDist
	
	// Specular (cubemap) pass	
	HALF3 specularLighting = HALF3( 0.0f, 0.0f, 0.0f );

#if CUBEMAP
	if( bCubemap )
	{
		HALF3 specularFactor = 1.0f;
	//	specularFactor *= tex2D( tHeightMap, i.texCoord ).xyz;	

		float3 worldVertToEyeVector = g_EyePos - i.worldPos_projPosZ.xyz;
		float3 reflectVect = CalcReflectionVectorUnnormalized( vNormalWS, worldVertToEyeVector );

		// Calc Fresnel factor
	//	half3 eyeVect = normalize(worldVertToEyeVector);
	//	HALF fresnel = 1.0 - dot( vNormalWS, eyeVect );
	//	fresnel = pow( fresnel, 5.0 );
	//	fresnel = fresnel * g_OneMinusFresnelReflection + g_FresnelReflection;
		
		specularLighting = ENV_MAP_SCALE * texCUBE( tEnvmap, reflectVect );
		specularLighting *= specularFactor;
								   
		specularLighting *= g_EnvmapTint;
#if FANCY_BLENDING == 0
		HALF3 specularLightingSquared = specularLighting * specularLighting;
		specularLighting = lerp( specularLighting, specularLightingSquared, g_EnvmapContrast );
		HALF3 greyScale = dot( specularLighting, HALF3( 0.299f, 0.587f, 0.114f ) );
		specularLighting = lerp( greyScale, specularLighting, g_EnvmapSaturation );
#endif
	//	specularLighting *= fresnel;

		specularLighting.rgb = specularLighting.rgb; // * cParallaxOcclusionRatio + (1 - cParallaxOcclusionRatio);
	}
#endif // end of CUBEMAP

#if !UNLIT					
//	HALF2 bumpCoord1 = ComputeLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy );

	HALF3 lightmapColor1 = HALF3( 1.0f, 1.0f, 1.0f );
	HALF3 lightmapColor2 = HALF3( 1.0f, 1.0f, 1.0f );
	HALF3 lightmapColor3 = HALF3( 1.0f, 1.0f, 1.0f );
#if BUMPMAP
		HALF2 bumpCoord1;
		HALF2 bumpCoord2;
		HALF2 bumpCoord3;
		ComputeBumpedLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy,
			bumpCoord1, bumpCoord2, bumpCoord3 );
		
		HALF4 lightmapSample1 = tex2D( tLightmap, bumpCoord1 );
		lightmapColor1 = lightmapSample1.rgb;
		lightmapColor2 = tex2D( tLightmap, bumpCoord2 );
		lightmapColor3 = tex2D( tLightmap, bumpCoord3 );
#else
	//	if( !bFlashlight )
		{
			HALF2 bumpCoord1 = ComputeLightmapCoordinates( i.lightmapTexCoord1And2, i.lightmapTexCoord3.xy );
			HALF4 lightmapSample1 = tex2D( tLightmap, bumpCoord1 );
			lightmapColor1 = lightmapSample1;
		}
#endif

//	HALF4 lightmapColor = tex2D( tLightmap, bumpCoord1 );

	HALF3 lightingNormal = HALF3( 0.0f, 0.0f, 1.0f );
#if BUMPMAP
		HALF3 normalTexel;
		normalTexel = bumpColor.xyz;
		lightingNormal = 2.0 * normalTexel - 1.0;
#endif

	HALF3 diffuseLighting; 
#if BUMPMAP
		float dot1 = saturate( dot( lightingNormal, bumpBasis[0] ) );
		float dot2 = saturate( dot( lightingNormal, bumpBasis[1] ) );
		float dot3 = saturate( dot( lightingNormal, bumpBasis[2] ) );

		float sum = dot1 + dot2 + dot3;
		diffuseLighting = dot1 * lightmapColor1 +
								 dot2 * lightmapColor2 +
								 dot3 * lightmapColor3;
		diffuseLighting *= 1.0f / sum;
#else
		diffuseLighting = lightmapColor1.rgb;
#endif

	diffuseLighting.rgb *= LIGHT_MAP_SCALE;
	
	// Add texture glow to the lighting
	if( bSelfIllum )
	{	
		HALF3 albedo = HALF3( 1.0f, 1.0f, 1.0f );
		albedo *= baseColor;

		HALF3 selfIllumComponent = g_SelfIllumTint * albedo;
		diffuseLighting = lerp( diffuseLighting, selfIllumComponent, baseColor.a );
	}
		
	// Add flashlight lighting to diffuse lighting after all the parallax computations are done
	if( bFlashlight )
	{
		float3 worldSpaceNormal;
		worldSpaceNormal =  vNormalWS; //mul( normal, i.tangentSpaceTranspose );

		int nShadowSampleLevel = 0;
		bool bDoShadows = false;

		float2 vProjPos = float2(0, 0);

// On ps_2_b, we can do shadow mapping
#if ( FLASHLIGHTSHADOWS && (defined(SHADER_MODEL_PS_2_B) || defined(SHADER_MODEL_PS_3_0) ) )
		nShadowSampleLevel = FLASHLIGHTDEPTHFILTERMODE;
		bDoShadows = true;
#endif
		float4 flashlightSpacePosition = mul( float4( i.worldPos_projPosZ.xyz, 1.0f ), g_FlashlightWorldToTexture );
	
		diffuseLighting += (DoFlashlight( g_FlashlightPos, i.worldPos_projPosZ.xyz, flashlightSpacePosition,
			worldSpaceNormal, g_FlashlightAttenuationFactors.xyz, 
			g_FlashlightAttenuationFactors.w, tFlashlight, tDepth, tNormalisation,
			nShadowSampleLevel,	bDoShadows, false, vProjPos, false ));
	} // end of if( bFlashlight )

#if !UNLIT
//	if( cParallaxOcclusionRatio != 0)
//	{
//		baseColor.rgb *= 1 - (fParallaxAmount * cParallaxOcclusionRatio);
//	}
#endif

	// Finally, add the complete lighting to the texture colours
	baseColor.rgb *= diffuseLighting;
#endif

	baseColor.rgb += specularLighting;
	
#if DETAILTEXTURE
	// Do detail pass	
	HALF4 detailColor = HALF4( 1.0f, 1.0f, 1.0f, 1.0f );
	detailColor = tex2D( tDetail, i.texCoord.xy );
	baseColor.rgb = lerp( baseColor, detailColor, detailColor.a );
#endif					
	HALF4 finalColor = baseColor;
	finalColor.a = baseColor.a;

	// fog functionality
	
//	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos.z, i.worldPos_projPosZ.z, i.worldPos_projPosZ.w );
	return FinalOutput( finalColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR );
	
}   // End of float4 ps_main(..) 
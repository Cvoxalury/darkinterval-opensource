// DYNAMIC: "PIXELFOGTYPE"				"0..1"
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..1"		[ps20b] [PC]
// DYNAMIC: "WRITE_DEPTH_TO_DESTALPHA"	"0..0"		[ps20b] [XBOX]

// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..0"	[= 0] [XBOX]
// DYNAMIC: "FLASHLIGHT" "0..1" // DI - adding cables flashlight
// STATIC: "FLASHLIGHTDEPTHFILTERMODE"	"0..0"	[ps20b] [PC]
// DYNAMIC: "FLASHLIGHTSHADOWS"	 "0..0"	[ps20b]

#include "common_flashlight_fxc.h" // DI - adding cables flashlight

#if defined( SHADER_MODEL_PS_2_0 )
#	define WRITE_DEPTH_TO_DESTALPHA 0
#endif

#include "common_ps_fxc.h"
#include "shader_constant_register_map.h"

sampler NormalSampler						: register( s0 );
sampler BaseTextureSampler					: register( s1 );

// DI - adding cables flashlight
sampler RandRotSampler						: register( s6 );	// RandomRotation sampler
sampler FlashlightSampler					: register( s7 );
sampler ShadowDepthSampler					: register( s8 );	// Flashlight shadow depth map sampler
sampler DepthSampler						: register( s10 );	//depth buffer sampler for depth blending
const float4 g_EnvmapContrast_ShadowTweaks		: register( c2 );
const float4 g_FlashlightAttenuationFactors	: register( c22 );
const HALF3 g_FlashlightPos					: register( c23 );
const float4x4 g_FlashlightWorldToTexture	: register( c24 ); // through c27

const float4 g_FogParams					: register( PSREG_FOG_PARAMS );
const float4 g_EyePos_SpecExponent			: register( PSREG_EYEPOS_SPEC_EXPONENT );

struct PS_INPUT
{
	float2 vTexCoord0				: TEXCOORD0;
	float2 vTexCoord1				: TEXCOORD1;
	
//	float3 worldSpaceNormal			: TEXCOORD4;	// DI - adding cables flashlight
	float4 projPos					: TEXCOORD6;
	
	float4 worldPos_projPosZ		: TEXCOORD7;		// Necessary for pixel fog

	float4 directionalLightColor 	: COLOR0;
	float4 fogFactorW				: COLOR1;
};

float4 main( PS_INPUT i ) : COLOR
{	
	float3 vNormalMapDir = tex2D( NormalSampler, i.vTexCoord0 ); // Get the 3-vector from the normal map
	float4 textureColor = tex2D( BaseTextureSampler, i.vTexCoord1 ); // Interpret tcoord t1 as color data.

	//Expand compacted vectors
	//TODO: find if there's a better way to expand a color normal to a full vector ( _bx2 was used in the assembly code )
	vNormalMapDir = (vNormalMapDir - 0.5) * 2.0;
	float3 vLightDir = float3( 0.0f, 0.0f, 1.0f );
	
	float lightDirDotNormalMap = dot( vNormalMapDir, vLightDir ); //normalMap dot dirLightDir

	// do half-lambert on the dot
	lightDirDotNormalMap = lightDirDotNormalMap * 0.5 + 0.5;
	lightDirDotNormalMap = lightDirDotNormalMap * lightDirDotNormalMap;

	float4 resultColor;
	resultColor.xyz = lightDirDotNormalMap * ( textureColor.rgb * i.directionalLightColor.rgb );
	resultColor.a = textureColor.a * i.directionalLightColor.a;
	
#if FLASHLIGHT // DI - adding cables flashlight
	int nShadowSampleLevel = 0;
	bool bDoShadows = false;
	
	// On ps_2_b, we can do shadow mapping
#if ( FLASHLIGHTSHADOWS && (defined(SHADER_MODEL_PS_2_B) || defined(SHADER_MODEL_PS_3_0) ) )
			nShadowSampleLevel = FLASHLIGHTDEPTHFILTERMODE;
			bDoShadows = true;
#endif

	float4 flashlightSpacePosition = mul( float4( i.worldPos_projPosZ.xyz, 1.0f ), g_FlashlightWorldToTexture );

	// We want the N.L to happen on the flashlight pass, but can't afford it on ps20
	bool bUseWorldNormal = true;
	#if ( defined( SHADER_MODEL_PS_2_0 ) && ( DETAILTEXTURE ) )
		bUseWorldNormal = false;
	#endif
	
	float3 vFlashlightDir = g_FlashlightPos - g_EyePos_SpecExponent.xyz;
	
	float3 flashlightColor = DoFlashlight( g_FlashlightPos, i.worldPos_projPosZ.xyz, flashlightSpacePosition,
			vFlashlightDir, g_FlashlightAttenuationFactors.xyz, 
			g_FlashlightAttenuationFactors.w, FlashlightSampler, ShadowDepthSampler,
			RandRotSampler, nShadowSampleLevel, bDoShadows, false, i.projPos.xy / i.projPos.w, false, g_EnvmapContrast_ShadowTweaks, bUseWorldNormal );

	resultColor.rgb *= flashlightColor.xyz * 10;
#endif

	float fogFactor = CalcPixelFogFactor( PIXELFOGTYPE, g_FogParams, g_EyePos_SpecExponent.z, i.worldPos_projPosZ.z, i.worldPos_projPosZ.w );
	return FinalOutput( resultColor, fogFactor, PIXELFOGTYPE, TONEMAP_SCALE_LINEAR, (WRITE_DEPTH_TO_DESTALPHA != 0), i.worldPos_projPosZ.w );
}

//===================== Copyright (c) Valve Corporation. All Rights Reserved. ======================
//
// Example vertex shader that can be applied to models
//
//==================================================================================================
//  STATIC: "TREESWAY"					"0..2"

//  DYNAMIC: "COMPRESSED_VERTS"			"0..1"
//	DYNAMIC: "DOWATERFOG"				"0..1"
//	DYNAMIC: "SKINNING"					"0..1"
//  STATIC: "HALFLAMBERT"				"0..1"
//	DYNAMIC: "DYNAMIC_LIGHT"			"0..1"
//	DYNAMIC: "STATIC_LIGHT"				"0..1"
//  DYNAMIC: "LIGHTING_PREVIEW"			"0..1"
//  DYNAMIC: "NUM_LIGHTS"				"0..2"

#include "common_vs_fxc.h"

static const bool g_bSkinning		= SKINNING ? true : false;
static const int g_FogType			= DOWATERFOG;
static const bool g_bHalfLambert	= HALFLAMBERT ? true : false;

const float4 cBaseTexCoordTransform[2]		: register( SHADER_SPECIFIC_CONST_0 );
const float4 cDetailTexCoordTransform[2]	:  register( SHADER_SPECIFIC_CONST_4 );

#if ( TREESWAY )
const float4 g_vMiscParams1					: register( SHADER_SPECIFIC_CONST_6 );
const float4 g_vMiscParams2					: register( SHADER_SPECIFIC_CONST_7 );
const float4 g_vMiscParams3					: register( SHADER_SPECIFIC_CONST_8 );
const float4 g_vMiscParams4					: register( SHADER_SPECIFIC_CONST_9 );
#define g_flTime g_vMiscParams2.y
#define g_vWindDir g_vMiscParams2.zw

#define g_flFastSwaySpeedScale g_vMiscParams1.x
#define g_flScrumbleFalloffCurve g_vMiscParams1.y
#define g_flSwayFalloffCurve g_vMiscParams1.z
#define g_flScrumbleSpeed g_vMiscParams1.w

#define g_flHeight g_vMiscParams3.x
#define g_flStartHeight g_vMiscParams3.y
#define g_flRadius g_vMiscParams3.z
#define g_flStartRadius g_vMiscParams3.w

#define g_flSwaySpeed g_vMiscParams4.x
#define g_flSwayIntensity g_vMiscParams4.y
#define g_flScrumbleWaveCount g_vMiscParams4.z
#define g_flScrumbleIntensity g_vMiscParams4.w

#define g_flWindSpeedLerpStart cDetailTexCoordTransform[0].x
#define g_flWindSpeedLerpEnd cDetailTexCoordTransform[0].y
#include "tree_sway.h"
#endif

//-----------------------------------------------------------------------------
// Input vertex format
//-----------------------------------------------------------------------------
struct VS_INPUT
{
	// This is all of the stuff that we ever use.
	float4 vPos			: POSITION;
	float4 vBoneWeights	: BLENDWEIGHT;
	float4 vBoneIndices	: BLENDINDICES;
	float4 vNormal		: NORMAL;
	float2 vTexCoord0	: TEXCOORD0;
	float3 vSpecular	: COLOR1;
};

struct VS_OUTPUT
{
	// Stuff that isn't seen by the pixel shader
	float4 projPosSetup	: POSITION;	
	float  fog			: FOG;
	// Stuff that is seen by the pixel shader
	float2 baseTexCoord	: TEXCOORD0;
	float4 lightAtten	: TEXCOORD1;
	float3 worldNormal	: TEXCOORD2;
	float3 worldPos		: TEXCOORD3;
	float3 projPos		: TEXCOORD4;
	float4 color 		: TEXCOORD5;		// Vertex color (from lighting or unlit)
};

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;

	bool bDynamicLight = DYNAMIC_LIGHT ? true : false;
	bool bStaticLight = STATIC_LIGHT ? true : false;
	bool bDoLighting = bDynamicLight || bStaticLight;

	float3 vNormal;
	DecompressVertex_Normal( v.vNormal, vNormal );
	
	float4 vPosition = v.vPos;
	
	o.color = float4( 0.0f, 0.0f, 0.0f, 0.0f );
	
#if ( TREESWAY )
	vPosition.xyz = ComputeTreeSway( vPosition.xyz, g_flTime );
#endif

	float3 worldNormal, worldPos;
	SkinPositionAndNormal( g_bSkinning, vPosition, vNormal, v.vBoneWeights, v.vBoneIndices, worldPos, worldNormal );

	// Transform into projection space
	float4 vProjPos = mul( float4( worldPos, 1 ), cViewProj );
	o.projPosSetup = vProjPos;
	vProjPos.z = dot( float4( worldPos, 1  ), cViewProjZ );

	o.projPos = vProjPos.xyz;
	o.fog = CalcFog( worldPos, vProjPos.xyz, g_FogType );

	// Needed for water fog alpha and diffuse lighting 
	o.worldPos = worldPos;
	o.worldNormal = normalize( worldNormal );

	// Scalar attenuations for four lights
	o.lightAtten.xyz = float4(0,0,0,0);
	#if ( NUM_LIGHTS > 0 )
		o.lightAtten.x = GetVertexAttenForLight( worldPos, 0, false );
	#endif
	#if ( NUM_LIGHTS > 1 )
		o.lightAtten.y = GetVertexAttenForLight( worldPos, 1, false );
	#endif
	#if ( NUM_LIGHTS > 2 )
		o.lightAtten.z = GetVertexAttenForLight( worldPos, 2, false );
	#endif
	#if ( NUM_LIGHTS > 3 )
		o.lightAtten.w = GetVertexAttenForLight( worldPos, 3, false );
	#endif
	
#if !defined (_X360) && FLASHLIGHT
	o.color = float4( 0.0f, 0.0f, 0.0f, 0.0f );
#else
	o.color.xyz = DoLightingUnrolled( worldPos, worldNormal, v.vSpecular, bStaticLight, bDynamicLight, g_bHalfLambert, NUM_LIGHTS );
#endif
	// Base texture coordinate transform
	o.baseTexCoord.x = dot( v.vTexCoord0, cBaseTexCoordTransform[0] );
	o.baseTexCoord.y = dot( v.vTexCoord0, cBaseTexCoordTransform[1] );

	return o;
}

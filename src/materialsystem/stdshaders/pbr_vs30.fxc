//==================================================================================================
//
// Physically Based Rendering vertex shader for brushes and models
//
//==================================================================================================
//  STATIC: "BLENDED"					"0..1"
//  STATIC: "TREESWAY"					"0..2"
//  DYNAMIC: "COMPRESSED_VERTS"         "0..1"
//  DYNAMIC: "DOWATERFOG"               "0..1"
//  DYNAMIC: "SKINNING"                 "0..1"
//  DYNAMIC: "LIGHTING_PREVIEW"         "0..1"
//  DYNAMIC: "NUM_LIGHTS"               "0..4"

#include "common_vs_fxc.h"

const float4 cDetailTexCoordTransform[2]	:  register( SHADER_SPECIFIC_CONST_4 );

#if ( TREESWAY )
const float4 g_vMiscParams1					: register( SHADER_SPECIFIC_CONST_6 );
const float4 g_vMiscParams2					: register( SHADER_SPECIFIC_CONST_7 );
const float4 g_vMiscParams3					: register( SHADER_SPECIFIC_CONST_8 );
const float4 g_vMiscParams4					: register( SHADER_SPECIFIC_CONST_9 );
#define g_flTime g_vMiscParams2.y
#define g_vWindDir g_vMiscParams2.zw

#define g_flFastSwaySpeedScale g_vMiscParams1.x
#define g_flScrumbleFalloffCurve g_vMiscParams1.y
#define g_flSwayFalloffCurve g_vMiscParams1.z
#define g_flScrumbleSpeed g_vMiscParams1.w

#define g_flHeight g_vMiscParams3.x
#define g_flStartHeight g_vMiscParams3.y
#define g_flRadius g_vMiscParams3.z
#define g_flStartRadius g_vMiscParams3.w

#define g_flSwaySpeed g_vMiscParams4.x
#define g_flSwayIntensity g_vMiscParams4.y
#define g_flScrumbleWaveCount g_vMiscParams4.z
#define g_flScrumbleIntensity g_vMiscParams4.w

#define g_flWindSpeedLerpStart cDetailTexCoordTransform[0].x
#define g_flWindSpeedLerpEnd cDetailTexCoordTransform[0].y
#include "tree_sway.h"
#endif

// Treesway only works on models, which can't have blend
// SKIP: ($TREESWAY != 0) && ($BLENDED != 0)

static const bool g_bSkinning           = SKINNING ? true : false;
static const int g_FogType              = DOWATERFOG;
const float4 cBaseTexCoordTransform[2]  : register(SHADER_SPECIFIC_CONST_0);
const float4 cAccumulationTexCoordTransform[2]  : register(SHADER_SPECIFIC_CONST_10);
//-----------------------------------------------------------------------------
// Input vertex format
//-----------------------------------------------------------------------------
struct VS_INPUT
{
    // This is all of the stuff that we ever use
    float4 vPos                     : POSITION;
    float4 vBoneWeights             : BLENDWEIGHT;
    float4 vBoneIndices             : BLENDINDICES;
    float4 vNormal                  : NORMAL;
    float2 vTexCoord0               : TEXCOORD0;
    float4 vLightmapTexCoord        : TEXCOORD1;
    float4 vLightmapTexCoordOffset  : TEXCOORD2;
	#if BLENDED
    float4 vColor                   : COLOR0;
	#endif
};

struct VS_OUTPUT
{
    // Stuff that isn't seen by the pixel shader
    float4 projPosSetup             : POSITION;
    float  fog                      : FOG;
    // Stuff that is seen by the pixel shader
    float2 baseTexCoord             : TEXCOORD0;
    float4 lightAtten               : TEXCOORD1;
    float3 worldNormal              : TEXCOORD2;
    float3 worldPos                 : TEXCOORD3;
    float3 projPos                  : TEXCOORD4;
    float4 lightmapTexCoord1And2    : TEXCOORD5;
    float4 lightmapTexCoord3        : TEXCOORD6;
	float2 accumulateTexCoord		: TEXCOORD8;
	#if BLENDED
    float blend                     : COLOR0;
	#endif
};

//-----------------------------------------------------------------------------
// Main shader entry point
//-----------------------------------------------------------------------------
VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o;

    o.lightmapTexCoord3.z = dot(v.vTexCoord0, cBaseTexCoordTransform[0]) + cBaseTexCoordTransform[0].w;
    o.lightmapTexCoord3.w = dot(v.vTexCoord0, cBaseTexCoordTransform[1]) + cBaseTexCoordTransform[1].w;
    o.lightmapTexCoord1And2.xy = v.vLightmapTexCoord + v.vLightmapTexCoordOffset;

    float2 lightmapTexCoord2 = o.lightmapTexCoord1And2.xy + v.vLightmapTexCoordOffset;
    float2 lightmapTexCoord3 = lightmapTexCoord2 + v.vLightmapTexCoordOffset;

    // Reversed component order
    o.lightmapTexCoord1And2.w = lightmapTexCoord2.x;
    o.lightmapTexCoord1And2.z = lightmapTexCoord2.y;

    o.lightmapTexCoord3.xy = lightmapTexCoord3;
	
	float4 vPosition = v.vPos;

#if ( TREESWAY )
	vPosition.xyz = ComputeTreeSway( vPosition.xyz, g_flTime );
#endif

    float3 vNormal;
    DecompressVertex_Normal(v.vNormal, vNormal);

    float3 worldNormal, worldPos;
    SkinPositionAndNormal(g_bSkinning, vPosition, vNormal, v.vBoneWeights, v.vBoneIndices, worldPos, worldNormal);

    // Transform into projection space
    float4 vProjPos = mul(float4(worldPos, 1), cViewProj);
    o.projPosSetup = vProjPos;
    vProjPos.z = dot(float4(worldPos, 1), cViewProjZ);

    o.projPos = vProjPos.xyz;
    o.fog = CalcFog(worldPos, vProjPos.xyz, g_FogType);

    // Needed for water fog alpha and diffuse lighting 
    o.worldPos = worldPos;
    o.worldNormal = normalize(worldNormal);

    // Scalar attenuations for four lights
    o.lightAtten = float4(0, 0, 0, 0);

    #if (NUM_LIGHTS > 0)
        o.lightAtten.x = GetVertexAttenForLight(worldPos, 0, false);
    #endif

    #if (NUM_LIGHTS > 1)
        o.lightAtten.y = GetVertexAttenForLight(worldPos, 1, false);
    #endif

    #if (NUM_LIGHTS > 2)
        o.lightAtten.z = GetVertexAttenForLight(worldPos, 2, false);
    #endif
	
    #if (NUM_LIGHTS > 3)
        o.lightAtten.w = GetVertexAttenForLight(worldPos, 3, false);
    #endif
	
	// Base texture coordinate transform
	o.baseTexCoord.x = dot(v.vTexCoord0, cBaseTexCoordTransform[0]);
	o.baseTexCoord.y = dot(v.vTexCoord0, cBaseTexCoordTransform[1]);

	// Dynamic accumulation coordinate transform
	o.accumulateTexCoord.x = dot( v.vTexCoord0, cAccumulationTexCoordTransform[0] );
	o.accumulateTexCoord.y = dot( v.vTexCoord0, cAccumulationTexCoordTransform[1] );

	#if BLENDED
	o.blend = v.vColor.a;
	#endif

    return o;
}
